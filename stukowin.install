<?php
/**
 * @ingroup Stukowin_Module
 * @file
 * @brief Install script
 * 
 * This file contains the Drupal install script for the stukowin module.
 * 
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @version 1.0.3 2014-07-31
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 * 
 */

/** 
 * @ingroup Stukowin_Module
 * @brief Implements hook_install(). 
 * 
 * Sets up drupal for use with the stukowin module.
 * + Creates the content type for LVA nodes.
 * + Creates relation types for requirements and recommendations.
 * + Adds 3 fields to taxonomy nodes for @c faculty, @c version and @c type of curriculum
 * 
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.3 2014-07-31
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 */
function stukowin_install() {
	try {
		$t = get_t ();
		node_types_rebuild ();
		
		$types = node_type_get_types ();
		
		$stukowin_type = array (
				'type' => 'stukowin',
				'name' => $t ( 'Stukowin LVA' ),
				'base' => 'node_content',
				'module' => 'node',
				'locked' => 0,
				'description' => $t ( 'LVA content type for stukowin module.' ),
				'title_label' => $t ( 'LVA content type for stukowin module' ),
				'custom' => TRUE 
		);
		$content_type = node_type_set_defaults ( $stukowin_type );
		// add the body field to the node type
		node_add_body_field ( $content_type );
		node_type_save ( $content_type );
		variable_set ( 'language_content_type_stukowin', 1 );
		variable_set ( 'node_options_stukowin', array (
				'status',
				'promote',
				'revision' 
		) );
		// create Relation Types for Voraussetzungen and Empfehlungen
		_stukowin_create_relation_types ();
		// Load the instance definition for our content type's body
		$body_instance = field_info_instance ( 'node', 'body', 'stukowin' );
		// Configure the body field
		$body_instance ['type'] = 'text_summary_or_trimmed';
		// Save our changes to the body field instance.
		field_update_instance ( $body_instance );
		// Create all the fields we are adding to our content type.
		foreach ( _stukowin_installed_fields () as $field ) {
			field_create_field ( $field );
		}
		// Create all the instances for our fields.
		foreach ( _stukowin_installed_instances () as $instance ) {
			$instance ['entity_type'] = 'node';
			$instance ['bundle'] = 'stukowin';
			field_create_instance ( $instance );
		}
		// Create all the fields we are adding to our content type.
		foreach ( _stukowin_installed_taxonomy_fields () as $field ) {
			field_create_field ( $field );
		}
		// Create all the instances for our fields.
		foreach ( _stukowin_installed_taxonomy_instances () as $instance ) {
			$instance ['entity_type'] = 'taxonomy_vocabulary';
			$instance ['bundle'] = 'taxonomy_vocabulary';
			field_create_instance ( $instance );
		}
		drupal_set_message ( 'StukoWIN CEUS module installed. <a href="' . url ( 'admin/stukowin/settings' ) . '">Configure</a>' );
	} catch ( Exception $e ) {
		drupal_set_message($e->getMessage(),'error');
	}
}

/**
 * @ingroup Stukowin_Module
 * @brief Contains the array of additional vocabulary fields
 * 
 * Returns a structured array defining the custom fields for vocabularies.  
 * The additional fields are:
 * + faculty
 * + version
 * + type 
 * of curriculum as received from CEUS.
 * 
 * @return A structured array for Drupal field generation
 * 
 * @version 1.0.0 2014-07-07
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 * 
 * @see _stukowin_installed_taxonomy_instances()
 */
function _stukowin_installed_taxonomy_fields() {
	$t = get_t ();
	return array (
			'faculty' => array (
					'field_name' => 'faculty',
					'label' => $t ( 'faculty' ),
					'type' => 'text' 
			),
			'version' => array (
					'field_name' => 'version',
					'label' => $t ( 'Version' ),
					'type' => 'text' 
			),
			'currtype' => array (
					'field_name' => 'currtype',
					'label' => $t ( 'Typ' ),
					'type' => 'text' 
			) 
	);
}

/**
 * @ingroup Stukowin_Module
 * @brief Contains the array of additional fields for vocabulary instances
 * 
 * Returns a structured array defining and describing in greater detail the custom fields for vocabularies.  
 * The additional fields are:
 * + faculty
 * + version
 * + type 
 * of curriculum as received from CEUS.
 * 
 * @return A structured array for drupal field instance generation
 * 
 * @version 1.0.0 2014-07-07
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 * 
 * @see _stukowin_installed_taxonomy_fields()
 */
function _stukowin_installed_taxonomy_instances() {
	$t = get_t ();
	return array (
			'faculty' => array (
					'label' => $t ( 'Fakultï¿½t' ),
					'field_name' => 'faculty',
					'type' => 'text',
					'widget' => array (
							'type' => 'text_textfield' 
					) 
			),
			
			'version' => array (
					'field_name' => 'version',
					'label' => $t ( 'Version' ),
					'type' => 'text',
					'widget' => array (
							'type' => 'text_textfield' 
					) 
			),
			'currtype' => array (
					'field_name' => 'currtype',
					'label' => $t ( 'Typ' ),
					'type' => 'text',
					'widget' => array (
							'type' => 'text_textfield' 
					) 
			) 
	);
}

/**
 * @ingroup Stukowin_Module
 * @brief Contains the array of additional fields for the stukowin content node type
 * 
 * Return a structured array defining the fields created by this content type. 
 * The additional fields are:
 * + ceusid
 * + code
 * + ects
 * + wst
 * + verantname
 * + verantemail
 * + changedate
 * + lvtypname
 * + lvtypshort
 * + lvatype
 * + typename
 * + ziele
 * + lehrinhalte
 * + voraussetzungen
 * + voraussetzung
 * + empfehlung
 * + term
 * of the course as received from CEUS and saved in Drupal.
 * @return A structured array for Drupal field generation
 * 
 * @version 1.0.0 2014-07-07
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 */
function _stukowin_installed_fields() {
	$t = get_t ();
	return array (
			'ceusid' => array (
					'field_name' => 'ceusid',
					'label' => $t ( 'CEUS ID' ),
					'type' => 'text' 
			),
			'code' => array (
					'field_name' => 'code',
					'label' => $t ( 'Code' ),
					'type' => 'text' 
			),
			'ects' => array (
					'field_name' => 'ects',
					'label' => $t ( 'ects' ),
					'type' => 'text' 
			),
			'wst' => array (
					'field_name' => 'wst',
					'label' => $t ( 'Wochenstunden' ),
					'type' => 'text' 
			),
			'verantname' => array (
					'field_name' => 'verantname',
					'label' => $t ( 'verantname' ),
					'type' => 'text' 
			),
			'verantemail' => array (
					'field_name' => 'verantemail',
					'label' => $t ( 'verantemail' ),
					'type' => 'text' 
			),
			'changedate' => array (
					'field_name' => 'changedate',
					'label' => $t ( 'changedate' ),
					'type' => 'text' 
			),
			'lvtypname' => array (
					'field_name' => 'lvtypname',
					'label' => $t ( 'lvtypname' ),
					'type' => 'text' 
			),
			'lvtypshort' => array (
					'field_name' => 'lvtypshort',
					'label' => $t ( 'lvtypshort' ),
					'type' => 'text' 
			),
			'lvatype' => array (
					'field_name' => 'lvatype',
					'label' => $t ( 'type' ),
					'type' => 'text' 
			),
			'typename' => array (
					'field_name' => 'typename',
					'label' => $t ( 'typename' ),
					'type' => 'text' 
			),
			'ziele' => array (
					'field_name' => 'ziele',
					'label' => $t ( 'ziele' ),
					'type' => 'text_long' 
			),
			'lehrinhalte' => array (
					'field_name' => 'lehrinhalte',
					'label' => $t ( 'lehrinhalte' ),
					'type' => 'text_long' 
			),
			'voraussetzungen' => array (
					'field_name' => 'voraussetzungen',
					'label' => $t ( 'Voraussetzungen' ),
					'type' => 'text_long' 
			),
			'voraussetzung' => array (
					'field_name' => 'voraussetzung',
					'label' => $t ( 'Voraussetzung' ),
					'type' => 'relation_select',
					'cardinality' => - 1 
			),
			'empfehlung' => array (
					'field_name' => 'empfehlung',
					'label' => $t ( 'Empfehlung' ),
					'type' => 'relation_select',
					'cardinality' => - 1 
			),
			'term' => array (
					'field_name' => 'term',
					'label' => $t ( 'term' ),
					'type' => 'taxonomy_term_reference' 
			) 
	);
}

/**
 * @ingroup Stukowin_Module
 * @brief Contains the array of additional fields for the stukowin content node type
 * 
 * Return a structured array defining and describing in greater detail the fields created by this content type. 
 * The additional fields are:
 * + ceusid
 * + code
 * + ects
 * + wst
 * + verantname
 * + verantemail
 * + changedate
 * + lvtypname
 * + lvtypshort
 * + lvatype
 * + typename
 * + ziele
 * + lehrinhalte
 * + voraussetzungen
 * + voraussetzung
 * + empfehlung
 * + term
 * of the course as received from CEUS and saved in Drupal.
 * @return A structured array for Drupal field generation
 * 
 * @version 1.0.0 2014-07-07
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Fabian Puehringer - f.puehringer@24speed.at
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 */
function _stukowin_installed_instances() {
	$t = get_t ();
	return array (
			'ceusid' => array (
					'field_name' => 'ceusid',
					'type' => 'text',
					'label' => $t ( 'CEUS ID' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'CEUS ID' ),
									'type' => 'text' 
							) 
					) 
			),
			'code' => array (
					'field_name' => 'code',
					'type' => 'text',
					'label' => $t ( 'LV-Code' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'LV-Code' ),
									'type' => 'text' 
							) 
					) 
			),
			'ects' => array (
					'field_name' => 'ects',
					'type' => 'text',
					'label' => $t ( 'ECTS' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'ECTS' ),
									'type' => 'text' 
							) 
					) 
			),
			'wst' => array (
					'field_name' => 'wst',
					'type' => 'text',
					'label' => $t ( 'Semesterwochenstunden' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Semesterwochenstunden' ),
									'type' => 'text' 
							) 
					) 
			),
			'verantname' => array (
					'field_name' => 'verantname',
					'type' => 'text',
					'label' => $t ( 'Verantwortliche(r)' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Verantwortliche(r)' ),
									'type' => 'text' 
							) 
					) 
			),
			'verantemail' => array (
					'field_name' => 'verantemail',
					'type' => 'text',
					'label' => $t ( 'E-Mail Verantwortliche(r)' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'E-Mail Verantwortliche(r)' ),
									'type' => 'text' 
							) 
					) 
			),
			'changedate' => array (
					'field_name' => 'changedate',
					'type' => 'text',
					'label' => $t ( 'Changedate' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Changedate' ),
									'type' => 'text' 
							) 
					) 
			),
			'lvtypname' => array (
					'field_name' => 'lvtypname',
					'type' => 'text',
					'label' => $t ( 'Art der LV' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Art der LV' ),
									'type' => 'text' 
							) 
					) 
			),
			'lvtypshort' => array (
					'field_name' => 'lvtypshort',
					'type' => 'text',
					'label' => $t ( 'Lvtypshort' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Lvtypshort' ),
									'type' => 'text' 
							) 
					) 
			),
			'lvatype' => array (
					'field_name' => 'lvatype',
					'type' => 'text',
					'label' => $t ( 'Lvatype' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Lvatype' ),
									'type' => 'text' 
							) 
					) 
			),
			'typename' => array (
					'field_name' => 'typename',
					'type' => 'text',
					'label' => $t ( 'Art der LV' ),
					'widget' => array (
							'type' => 'text_textfield' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Art der LV' ),
									'type' => 'text' 
							) 
					) 
			),
			'ziele' => array (
					'field_name' => 'ziele',
					'type' => 'text',
					'label' => $t ( 'Lehrveranstaltungsziele' ),
					'widget' => array (
							'type' => 'text_long' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Lehrveranstaltungsziele' ),
									'type' => 'text_long' 
							) 
					) 
			),
			'lehrinhalte' => array (
					'field_name' => 'lehrinhalte',
					'type' => 'text',
					'label' => $t ( 'Lehrinhalte' ),
					'widget' => array (
							'type' => 'text_long' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Lehrinhalte' ),
									'type' => 'text_long' 
							) 
					) 
			),
			'voraussetzungen' => array (
					'field_name' => 'voraussetzungen',
					'type' => 'text',
					'label' => $t ( 'Anmeldevoraussetzung(en)' ),
					'widget' => array (
							'type' => 'text_long' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Anmeldevoraussetzung(en)' ),
									'type' => 'text_long' 
							) 
					) 
			),
			'voraussetzung' => array (
					'field_name' => 'voraussetzung',
					'label' => $t ( 'Anmeldevoraussetzung(en)' ),
					'type' => 'relation_select',
					'widget' => array (
							'type' => 'relation_select',
							'active' => 1 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Anmeldevoraussetzung(en)' ),
									'type' => 'relation_select' 
							) 
					),
					'settings' => array (
							'relation_view' => 'relation_select_node:default',
							'relation_type' => 'voraussetzung' 
					),
					'default_value' => array (
							'' 
					) 
			),
			'empfehlung' => array (
					'field_name' => 'empfehlung',
					'label' => $t ( 'Empfehlung(en)' ),
					'type' => 'relation_select',
					'widget' => array (
							'type' => 'relation_select',
							'active' => 1 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Empfehlung(en)' ),
									'type' => 'relation_select' 
							) 
					),
					'settings' => array (
							'relation_view' => 'relation_select_node:default',
							'relation_type' => 'empfehlung' 
					),
					'default_value' => array (
							'' 
					) 
			),
			
			'term' => array (
					'field_name' => 'term',
					'type' => 'taxonomy_term_reference',
					'label' => $t ( 'Term' ),
					'widget' => array (
							'type' => 'taxonomy_term_reference' 
					),
					'display' => array (
							'example_node_list' => array (
									'label' => $t ( 'Term' ),
									'type' => 'taxonomy_term_reference' 
							) 
					) 
			) 
	);
}

/**
 * @ingroup Stukowin_Module
 * @brief Contains custom relation types for recommendations and requirements
 * 
 * @return An array containing the description for recommended and required prerequisite relations.
 * 
 * @version 1.0.0 2014-07-07
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 */
function _stukowin_relation_types() {
	return array (
			array (
					'disabled' => FALSE,
					'api_version' => 1,
					'relation_type' => 'voraussetzung',
					'label' => 'Voraussetzung',
					'reverse_label' => 'Vorausgesetzt von',
					'directional' => 1,
					'transitive' => 0,
					'r_unique' => 1,
					'min_arity' => 2,
					'max_arity' => 2,
					'source_bundles' => array (
							'node:stukowin' 
					),
					'target_bundles' => array (
							'node:stukowin' 
					) 
			),
			array (
					'disabled' => FALSE,
					'api_version' => 1,
					'relation_type' => 'empfehlung',
					'label' => 'Empfohlen',
					'reverse_label' => 'Empfohlen fuer',
					'directional' => 1,
					'transitive' => 0,
					'r_unique' => 1,
					'min_arity' => 2,
					'max_arity' => 2,
					'source_bundles' => array (
							'node:stukowin' 
					),
					'target_bundles' => array (
							'node:stukowin' 
					) 
			) 
	);
}

/**
 * @ingroup Stukowin_Module
 * @brief Creates the relation type
 * 
 * This method creates the relation type for course recommendations and requirements
 * 
 * @version 1.0.0 2014-07-07
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 */
function _stukowin_create_relation_types() {
	$aRelationtypes = _stukowin_relation_types ();
	// Empfehlung
	foreach ( $aRelationtypes as $aRelationtype ) {
		$oRelation_type = new stdClass ();
		foreach ( $aRelationtype as $sMember => $sValue ) {
			$oRelation_type->$sMember = $sValue;
		}
		// Relation type create adds default keys. It also handles casting to array.
		$oRelation_type = relation_type_create ( $oRelation_type );
		// Yes, in relation.module 'save' is a distinct step from 'create'.
		relation_type_save ( $oRelation_type );
	}
}

/** 
 * @ingroup Stukowin_Module
 * @brief Implements hook_uninstall(). 
 * 
 * + Deletes all content nodes
 * + Deletes all CEUS taxonomies
 * + Deletes the content type for LVA nodes
 * 
 * @version 1.0.0 2014-07-09
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @author Werner Breuer - bluescreenwerner@gmail.com
 * 
 * @since Commit 2506486a98691dbd0031666d5f932784bd3eede1 on 2014-07-09
 */
function stukowin_uninstall() {
	// set time limit for this specific method higher than the limit configured in the php.ini file
	// needed to not get timeouts on slower hardware
	set_time_limit ( 0 );
	// load all taxonomies
	$aTaxonomies = taxonomy_vocabulary_get_names ();
	$aStukoTaxonomies = array ();
	foreach ( $aTaxonomies as $oTaxonomy ) {
		if ((substr ( $oTaxonomy->machine_name, 0, 11 ) == 'curriculum_') || (substr ( $oTaxonomy->machine_name, 0, 15 ) == 'specialisation_') || (substr ( $oTaxonomy->machine_name, 0, 5 ) == 'itsv_')) {
			$aStukoTaxonomies [] = $oTaxonomy->vid;
			$oVocabulary = taxonomy_vocabulary_load ( $oTaxonomy->vid );
			variable_del ( "ceus_importer_M_{$oVocabulary->version['und'][0]['value']}_vocabulary" );
			variable_del ( "ceus_importer_B_{$oVocabulary->version['und'][0]['value']}_vocabulary" );
		}
	}
	// Gather all the example content that might have been created while this
	// module was enabled.
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query ( $sql, array (
			':type' => 'stukowin' 
	) );
	$nids = array ();
	foreach ( $result as $row ) {
		$nids [] = $row->nid;
	}
	// Delete all the nodes at once
	node_delete_multiple ( $nids );
	// Loop over each of the fields defined by this module and delete
	// all instances of the field, their data, and the field itself.
	foreach ( array_keys ( _stukowin_installed_fields () ) as $field ) {
		field_delete_field ( $field );
	}
	// Loop over any remaining field instances attached to the stukowin
	// content type (such as the body field) and delete them individually.
	$instances = field_info_instances ( 'node', 'stukowin' );
	foreach ( $instances as $instance_name => $instance ) {
		field_delete_instance ( $instance );
	}
	// Delete our content type
	node_type_delete ( 'stukowin' );
	
	// Loop over each of the fields defined by this module and delete
	// all instances of the field, their data, and the field itself.
	foreach ( array_keys ( _stukowin_installed_taxonomy_fields () ) as $field ) {
		field_delete_field ( $field );
	}
	// Loop over any remaining field instances attached to the stukowin
	// content type (such as the body field) and delete them individually.
	$instances = field_info_instances ( 'taxonomy' );
	foreach ( $instances as $instance_name => $instance ) {
		field_delete_instance ( $instance );
	}
	
	// Loop over all stukowin taxonomies and delete them. All of them.
	foreach ( $aStukoTaxonomies as $vid ) {
		taxonomy_vocabulary_delete ( $vid );
	}
	
	// Delete relation types
	$aRelationtypes = _stukowin_relation_types ();
	foreach ( $aRelationtypes as $aRelationtype ) {
		$oRelationtype = relation_type_load ( $aRelationtype ['relation_type'] );
		relation_type_delete ( $aRelationtype ['relation_type'] );
	}
	
	// Delete Variables
	$aVariables = array (
			'language_content_type_stukowin',
			'node_options_stukowin',
			'stukowin_ceus_api_url',
			'stukowin_ceus_api_username',
			'stukowin_ceus_api_userpassword',
			'stukowin_pdf_name',
			'stukowin_pdf_path' 
	);
	foreach ( $aVariables as $sVariable ) {
		variable_del ( $sVariable );
	}
	// Purge all field information
	field_purge_batch ( 1000 );
	drupal_set_message ( 'StukoWIN CEUS module uninstalled.' );
}
