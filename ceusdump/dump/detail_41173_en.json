{"id":"6569","code":"921SOENFMSK13","pagename":"CurriculumInformatikM02007W.LVFormalMethodsInSoftwareDevelopmentKV","type":"3","ects":"4.5","verantname":"Wolfgang Schreiner","verantemail":"wolfgang.schreiner@jku.at","changedate":"2013-07-05 00:00:00","version":"2013W","currname":"Computer Science","currnameeng":"Computer Science","currversion":"2013W","lv_id":"6569","wst":"3","teilungsziffer":"0","zuteilung":"3","lvtyp":"10","wechselnd":"0","sprache":"2","langname":"English","lvtypname":"Lecture with exercise","lvtypshort":"KV","zuteilungname":"Direct assignment","currtypename":"Master's programme","curriculumname":"Master's programme Computer Science 2013W","fachbereichname":"Computer Science","typename":"Course","uniname":"Johannes Kepler University Linz","levelname":"Master's programme 1. year","levelshort":"M1","title":"Formal Methods in Software Development","headtitle":"Formal Methods in Software Development","ziele":"Students understand the basic concepts of the formal specification of programs and systems and of the formal reasoning about the correctness of implementations with respect to the specification. They are able to apply software tools that support this process.\n","lehrinhalte":"Role of formal methods in software development, specification and verification of imperative programs (Hoare calculus, Dijkstra's calculus of weakest preconditions and strongest postconditions, relational calculus), specification and verification of Java programs (Java Modeling Language JML), specification and verification of concurrent systems (transition systems, temporal logic); practical application of proving assistants (RISC ProofNavigator), integrated verification environments (RISC ProgramExplorer, KeY), extended static checkers (ESC\/Java2), model checkers (Spin).\n","beurteilung":"Homework exercises (50%), final written exam (50%).\n","sonstiges":null,"voraussetzungen":null,"methoden":"Integrated course that combines the theoretical presentation with the practical demonstration of the application of systems on concrete examples.\n","literatur":"Supporting Literature:\n<\/p><ul><li>Apt, Krzysztof et al: Verification of Sequential and Concurrent Programs, 3rd edition, Springer, 2009.\n<\/li><li>Beckert, B.; H\u00e4hnle, R.; Schmitt, P. H. (Eds.): Verification of Object-Oriented Software: The KeY Approach. Springer, Berlin, 2007.\n<\/li><li>Huth, M.; Ryan, M.: Logic in Computer Science - Modelling and Reasoning about Systems. Cambridge University Press, Cambridge, 2nd edition, 2004.\n<\/li><li>Schumann, J. M.: Automated Theorem Proving in Software Engineering. Springer, Berlin, 2001.\n<\/li><\/ul><p>Special literature in the form of original papers.\n","equivalent":"<sup><acronym title='Unfortunately this information is not available in english.'>(*)<\/acronym><\/sup>INMSPKVFMSD: KV Formal Methods in Software Development (4,5 ECTS)\n","children":[]}