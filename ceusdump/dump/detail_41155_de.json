{"id":"6311","code":"921NESESECK13","pagename":"CurriculumInformatikM02007W.LVSecureCodeKV","type":"3","ects":"1.5","verantname":"Florian K\u00f6nig","verantemail":"Florian.Koenig@jku.at","changedate":"2013-07-02 00:00:00","version":"2013W","currname":"Computer Science","currnameeng":"Computer Science","currversion":"2013W","lv_id":"6311","wst":"1","teilungsziffer":"0","zuteilung":"3","lvtyp":"10","wechselnd":"0","sprache":"2","langname":"Englisch","lvtypname":"Kombinierte LV","lvtypshort":"KV","zuteilungname":"Direktzuteilung","currtypename":"Masterstudium","curriculumname":"Masterstudium Computer Science 2013W","fachbereichname":"Informatik","typename":"Lehrveranstaltung","uniname":"Johannes Kepler Universit\u00e4t Linz","levelname":"Master 2. Jahr","levelshort":"M2","title":"Secure Code","headtitle":"Secure Code","ziele":"Die Teilnehmer werden ein Verst\u00e4ndnis zu den h\u00e4ufigsten Sicherheitsl\u00fccken in Code und deren Ursache erlangen. Sie werden den Umfang des Problems erkennen, wissen wie man Bedrohungen erkennt und die Charakteristika h\u00e4ufiger Angriffswege kennen. Als praktische F\u00e4higkeiten werden sie lernen, unsicheren Code zu finden und auszubessern, speziell um die h\u00e4ufigen Sicherheitsl\u00fccken zu beseitigen. Zudem lernen sie, k\u00fcnftige Probleme zu vermeiden und Stolpersteine beim Programmieren zu umgehen. Sie erlangen au\u00dferdem Kenntnis \u00fcber Prozesse sichererer Softwareentwicklung und wie man Code auf Sicherheit testen kann.\n","lehrinhalte":"<ul><li>Prinzipien und Techniken sicherer Softwareentwicklung\n<\/li><li>Sicherheitsrisiko-Rankings und -taxonomien\n<\/li><li>Code-Einschleusung (SQL Injektion, Cross-Site Skripting XSS)\n<\/li><li>(Puffer-) \u00dcberl\u00e4ufe, Format-String-Angriffe\n<\/li><li>Ein-\/Ausgabebehandlung (Kanonisierung, Validierung, S\u00e4uberung)\n<\/li><li>Informationslecks, Geheimnisse sch\u00fctzen (Schl\u00fcssel, Passw\u00f6rter)\n<\/li><li>defensives und umsichtiges Programmieren\n<\/li><li>Widerstandsf\u00e4higkeit und Sabotageschutz (Denial of Service, Obfuskieren)\n<\/li><li>sichere Parallelisierung (Verklemmung, Wettlaufsituation)\n<\/li><li>Authentifizierung, Autorisierung, Privilegien-Management\n<\/li><li>Prozesse sicherer Softwareentwicklung\n<\/li><li>F\u00e4higkeiten spezifischer Sprachen und Umgebungen\n<\/li><\/ul>","beurteilung":"<ul><li>3-4 Einzel\u00fcbungen\n<\/li><li>schriftliche Klausur am Ende\n<\/li><li>Endnote besteht aus \u00dcbungsnote und Klausurnote\n<\/li><\/ul>","sonstiges":null,"voraussetzungen":"Good knowledge of programming will be required. Participants should be familiar with both Java and C, and have at least working knowledge of HTML \/ HTTP and SQL. \n<\/p>\n<p class='vspace'>In terms of courses: required courses include Softwareentwicklung 1, Softwareentwicklung 2, Informationssysteme 1 and Systemnahe Programmierung; recommended courses include Praktikum aus Softwareentwicklung 2.\n","methoden":"Vortrag, praktische Haus\u00fcbungen mit individuellem Feedback, Besprechung von Beispielen in Pr\u00e4senzveranstaltungen, Online-Begleitung mit M\u00f6glichkeit zu Diskussionen und Fragen im Forum\n","literatur":"keine Pflichtlekt\u00fcre; erg\u00e4nzend zum Kurs:\n<\/p><ul><li><strong>Writing Secure Code<\/strong>. Howard and LeBlanc. Microsoft Press, 2003.\n<\/li><li><strong>The CERT\u00ae Oracle\u00ae Secure Coding Standard for Java<\/strong>. Long et al. Addison-Wesley Professional, 2011.\n<\/li><li><strong>Secure Programming Cookbook for C and C++<\/strong>. Viega and Messier. O'Reilly, 2003.\n<\/li><li><strong>Foundations of Security: What Every Programmer Needs to Know<\/strong>. Kern, Kesavan and Daswani. Apress, 2007.\n<\/li><\/ul>","equivalent":"<strong>in collaboration with 921NESECRYK13: KV Cryptography (3 ECTS) equivalent to<\/strong><br \/>INMNPKVKRYP: KV Kryptographie (4,5 ECTS)<br \/><br \/>INMAWKVSECC: KV Secure Code (1,5 ECTS)\n","children":[]}