{"id":"6569","code":"921SOENFMSK13","pagename":"CurriculumInformatikM02007W.LVFormalMethodsInSoftwareDevelopmentKV","type":"3","ects":"4.5","verantname":"Wolfgang Schreiner","verantemail":"wolfgang.schreiner@jku.at","changedate":"2013-07-05 00:00:00","version":"2013W","currname":"Computer Science","currnameeng":"Computer Science","currversion":"2013W","lv_id":"6569","wst":"3","teilungsziffer":"0","zuteilung":"3","lvtyp":"10","wechselnd":"0","sprache":"2","langname":"Englisch","lvtypname":"Kombinierte LV","lvtypshort":"KV","zuteilungname":"Direktzuteilung","currtypename":"Masterstudium","curriculumname":"Masterstudium Computer Science 2013W","fachbereichname":"Informatik","typename":"Lehrveranstaltung","uniname":"Johannes Kepler Universit\u00e4t Linz","levelname":"Master 1. Jahr","levelshort":"M1","title":"Formal Methods in Software Development","headtitle":"Formal Methods in Software Development","ziele":"Die Studierenden verstehen die grundlegenden Konzepte der formalen Spezifikation von Programmen und Systemen sowie des formalen Schlie\u00dfens \u00fcber die Korrektheit von Implementierungen in Bezug auf die Spezifikation. Sie sind bef\u00e4higt, Software-Werkzeuge, die diesen Prozess unterst\u00fctzen, anzuwenden.  \n","lehrinhalte":"Rolle formaler Methoden in der Software-Entwicklung, Spezifikation und Verifikation imperativer Programme (Hoare-Kalk\u00fcl, Dijkstras Kalk\u00fcl der schw\u00e4chsten Vorbedingungen und st\u00e4rksten Nachbedingungen, Relationen-Kalk\u00fcl), Spezifikation und Verifikation von Java Programmen (Java Modeling Language JML), Spezifikation und Verifikation von nebenl\u00e4ufigen Systemen (Transitions-Systeme, temporale Logik); praktischer Umgang mit Beweis-Assistenten (RISC ProofNavigator), integrierten Verifikations-Umgebungen (RISC ProgramExplorer, KeY), erweiterte statische Checker (ESC\/Java2), Model Checker (Spin).\n","beurteilung":"\u00dcbungsaufgaben (50%), Abschlussklausur (50%)\n","sonstiges":null,"voraussetzungen":null,"methoden":"Kombinierte Lehrveranstaltung, die theoretische Stoffvermittlung mit praktischen Demonstrationen von Systemen anhand konkreter Beispiele verbindet.\n","literatur":"Erg\u00e4nzende Literatur:\n<\/p><ul><li>Apt, Krzysztof et al: Verification of Sequential and Concurrent Programs, 3rd edition, Springer, 2009.\n<\/li><li>Beckert, B.; H\u00e4hnle, R.; Schmitt, P. H. (Eds.): Verification of Object-Oriented Software: The KeY Approach. Springer, Berlin, 2007.\n<\/li><li>Huth, M.; Ryan, M.: Logic in Computer Science - Modelling and Reasoning about Systems. Cambridge University Press, Cambridge, 2nd edition, 2004.\n<\/li><li>Schumann, J. M.: Automated Theorem Proving in Software Engineering. Springer, Berlin, 2001.\n<\/li><\/ul><p>Spezialliteratur in Form von Originalarbeiten.\n","equivalent":"INMSPKVFMSD: KV Formal Methods in Software Development (4,5 ECTS)\n","children":[]}