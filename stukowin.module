<?php
set_time_limit ( 600 );

include_once dirname ( __FILE__ ) . '/ceus_importer.inc.php';
include_once dirname ( __FILE__ ) . '/content_manager.inc.php';
include_once dirname ( __FILE__ ) . '/pdf_creator.inc.php';

/**
 * Displays help information about the module.
 * Implements hook_help().
 */
function stukowin_help($path, $arg) {
	switch ($path) {
		// Main module help
		case 'admin/help#stukowin' :
			return '<p>' . t ( 'This module gets the complete JKU curriculum for Business Informatics from CEUS and displays it' ) . '</p>';
			break;
		// Main module help for the block module
		case 'admin/help#block' :
			return '<p>' . t ( 'Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array (
					'@blocks' => url ( 'admin/structure/block' ) 
			) ) . '</p>';
			break;
		// Help for another path in the block module
		case 'admin/structure/block' :
			return '<p>' . t ( 'This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the <em>Save blocks</em> button at the bottom of the page.' ) . '</p>';
			break;
	}
}

/**
 * Menu callback for module settings ("admin/stukowin/settings").
 * This form has the following input fields:
 * <ul>
 * <li>URL to CEUS API</li>
 * <li>Username for CEUS API</li>
 * <li>Password for CEUS API</li>
 * <li>Last Update from CEUS API</li>
 * <li>PDF Path</li>
 * <li>PDF generic name</li>
 * </ul>
 */
function stukowin_admin() {
	$form = array ();
	// CEUS API Settings
	$form ['stukowin_ceus_api'] = array (
			'#type' => 'fieldset',
			'#title' => t ( 'CEUS API Settings' ),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE 
	);
	$form ['stukowin_ceus_api'] ['stukowin_ceus_api_url'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'URL to CEUS API' ),
			'#default_value' => variable_get ( 'stukowin_ceus_api_url', 'https://lss.jku.at/studienhandbuch/api/0.1/' ),
			'#size' => 40,
			'#maxlength' => 255,
			'#description' => t ( "The URL to CEUS API" ),
			'#required' => TRUE 
	);
	$form ['stukowin_ceus_api'] ['stukowin_ceus_api_username'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Username for CEUS API' ),
			'#default_value' => variable_get ( 'stukowin_ceus_api_username' ),
			'#size' => 20,
			'#maxlength' => 40,
			'#description' => t ( "Username for CEUS API" ),
			'#required' => TRUE 
	);
	$form ['stukowin_ceus_api'] ['stukowin_ceus_api_userpassword'] = array (
			'#type' => 'password',
			'#title' => t ( 'Password for CEUS API' ),
			'#default_value' => variable_get ( 'stukowin_ceus_api_userpassword' ),
			'#size' => 20,
			'#maxlength' => 40,
			'#description' => t ( "Password for CEUS API" ),
			'#required' => TRUE 
	);
	// PDF generation settings
	$form ['stukowin_pdf'] = array (
			'#type' => 'fieldset',
			'#title' => t ( 'PDF Settings' ),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE 
	);
	$form ['stukowin_pdf'] ['stukowin_pdf_path'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Path' ),
			'#default_value' => variable_get ( 'stukowin_pdf_path', DRUPAL_ROOT . '/sites/default/files/pdf/archive' ),
			'#size' => 60,
			'#description' => t ( "The Path where the generated PDFs are saved" ),
			'#required' => TRUE 
	);
	$form ['stukowin_pdf'] ['stukowin_pdf_name'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Name' ),
			'#default_value' => variable_get ( 'stukowin_pdf_name', 'Uebersicht %currtype% %version%' ),
			'#size' => 40,
			'#description' => t ( 'The name template to use for new PDFs. Insert %version% for the curriculum version (e.g. "2013W") and %currtype% for the curriculum type (e.g "Bachelorstudium")' ),
			'#required' => TRUE 
	);
	return system_settings_form ( $form );
}

/**
 * @ingroup Drupal2PDF
 * Menu callback for generating PDF documents ("admin/settings/stukowin/pdf").
 * The user can choose between all currently published curriculum taxonomies. If none are availably, a warning message is displayed.
 */
function stukowin_pdf_menu($form, &$form_state) {
	// Load available curricula into array
	$aNames = array ();
	foreach ( (new content_manager ())->getCurricula ( '', array (
			'curriculum' 
	) ) as $oCurriculum ) {
		$aNames [$oCurriculum ['vid']] = t ( $oCurriculum ['name'] );
	}
	if (empty ( $aNames ))
		drupal_set_message ( 'There seems to be no curriculum currently available', 'warning' );
		// Build form
	$form = array ();
	$form ['curriculum_select'] = array (
			'#type' => 'select',
			'#title' => t ( 'Select Curriculum' ),
			'#description' => t ( "The taxonomy to create the PDF from" ),
			'#required' => TRUE,
			'#options' => $aNames 
	);
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Create PDF' ) 
	);
	return $form;
}

/**
 * @ingroup Drupal2PDF
 * Submit handler for {@link stukowin_pdf_menu()}.
 * Creates an instance of {@link overViewPDF} and starts the document generation. If successful, displays the full path of the generated document.
 */
function stukowin_pdf_menu_submit($form, &$form_state) {
	$oPdf = new overviewPDF ();
	drupal_set_message ( $oPdf->createPDF ( $form_state ['values'] ['curriculum_select'] ) );
}

/**
 * Menu callback for import ("admin/settings/stukowin/import").
 * Used as a warning before starting the import, as the process usually takes a long time to complete.
 */
function stukowin_pre_retreive($form, &$form_state) {
	$form = array ();
	$form ['warning_text'] = array (
			'#markup' => t ( '<p><strong>Are you sure you want to start the import? (this might take a while)</strong></p>' ) 
	);
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Start import' ) 
	);
	return $form;
}

/**
 * Submit handler for {@link stukowin_pre_retrieve()}.
 * Starts the import process and displays the outcome to the user.
 */
function stukowin_pre_retreive_submit($form, &$form_state) {
	include_once dirname ( __FILE__ ) . '/stukowin.install';
	$oCeusImporter = new ceus_importer ();
	if ($oCeusImporter->connect ()) {
		drupal_set_message ( $oCeusImporter->get_curricula () );
	} else
		drupal_set_message ( $oCeusImporter->get_error (), 'error' );
}

/**
 * JSON-Service for one the detailed nested array of courses for one curriculum.
 *
 * @param integer $iVID
 *        	The vid of the curriculum to get
 */
function stukowin_get_crclm_taxonomy($iVID) {
	$oContentManager = new content_manager ();
	return $oContentManager->json_service_curriculum ( $iVID );
}

/**
 * JSON-Service for a list of all currently published curricula.
 * The type of curriculum (e.g. "Bachelorstudium", "Masterstudium"), types of taxonomies (e.g. "curriculum", "itsv" or "specialisation") and the language (e.g. "de") can be given as HTTP GET-parameters.
 */
function stukowin_get_crclm_list() {
	$oContentManager = new content_manager ();
	// Set default values
	$sCurrType = '';
	$aTaxonomyTypes = array (
			'curriculum',
			'itsv',
			'specialisation' 
	);
	$sLang = 'de';
	// Get values from request (if given)
	if (isset ( $_GET ['currtype'] ))
		$sCurrType = $_GET ['currtype'];
	if (isset ( $_GET ['taxtypes'] ))
		$aTaxonomyTypes = $_GET ['taxtypes'];
	if (isset ( $_GET ['lang'] ))
		$sLang = $_GET ['lang'];
	drupal_json_output ( $oContentManager->getCurricula ( $sCurrType, $aTaxonomyTypes, $sLang ) );
	die (); // Necessary because drupal would send additional data otherwise
}

/**
 * JSON-Service for the details of a single course
 *
 * @param integer $iNodeID
 *        	The content node id of the course to get
 */
function stukowin_get_lva($iNodeID) {
	$oContentManager = new content_manager ();
	return $oContentManager->json_service_lva ( $iNodeID );
}

/**
 * Menu callback for creating a new ITSV or specialisation vocabulary.
 * Allows the user to select a source vocabulary, choose which type of vocabulary to create, set a name for the new vocabulary and choose how many structural terms (e.g. "1. Semester", "2. Semester") to automatically insert.
 */
function stukowin_taxonomy_menu($form, &$form_state) {
	// Load available curricula into array
	$aNames = array ();
	foreach ( (new content_manager ())->getCurricula ( '', array (
			'curriculum' 
	) ) as $oCurriculum ) {
		$aNames [$oCurriculum ['vid']] = t ( $oCurriculum ['name'] );
	}
	if (empty ( $aNames ))
		drupal_set_message ( 'There seems to be no curriculum currently available', 'warning' );
		// Build form
	$form = array ();
	$form ['curriculum_select'] = array (
			'#type' => 'select',
			'#title' => t ( 'Select Curriculum' ),
			'#description' => t ( "The core curriculum to base the new taxonomy on" ),
			'#required' => TRUE,
			'#options' => $aNames 
	);
	$form ['type_select'] = array (
			'#type' => 'select',
			'#title' => t ( 'Select Type' ),
			'#description' => t ( "The type of taxonomy to create" ),
			'#required' => TRUE,
			'#options' => array (
					'ITSV',
					'Specialisation' 
			) 
	);
	$form ['name_input'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Name' ),
			'#description' => t ( 'The name of the new taxonomy (a distinct name such as "ITSV Bachelorstudium 2013W Beginn WS" is recommended)' ),
			'#required' => TRUE 
	);
	$form ['num_struc'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Number of root elements' ),
			'#description' => t ( 'Number of root elemets (such as "1. Semester, 2. Semester etc." for ITSV) to add automatically' ),
			'#required' => FALSE,
			'#element_validate' => array (
					'element_validate_integer_positive' 
			),
			'#default_value' => '4' 
	);
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Create Taxonomy' ) 
	);
	return $form;
}

/**
 * Submit handler for {@see stukowin_taxonomy_menu}.
 * Creates a new ITSV or specialisation taxonomy and redirects the user to the taxonomy manager.
 */
function stukowin_taxonomy_menu_submit($form, &$form_state) {
	$sTaxonomyType = $form_state ['values'] ['type_select'] ? 'specialisation' : 'itsv';
	$oContentManager = new content_manager ();
	$oSourceCurr = $oContentManager->getCurriculum ( $form_state ['values'] ['curriculum_select'] );
	$sMachineName = $oContentManager->getUniqueMachineName ( ($sTaxonomyType . '_') );
	// Create new vocabulary
	$aEdit = array (
			'name' => $form_state ['values'] ['name_input'],
			'machine_name' => $sMachineName,
			'description' => $form_state ['values'] ['name_input'],
			'hierarchy' => 1,
			'module' => 'ceus_importer',
			'weight' => 10 
	);
	$oVocabulary = ( object ) $aEdit;
	$oVocabulary->{'faculty'} ['und'] [0] ['value'] = $oSourceCurr ['faculty'];
	$oVocabulary->{'version'} ['und'] [0] ['value'] = $oSourceCurr ['version'];
	$oVocabulary->{'currtype'} ['und'] [0] ['value'] = $oSourceCurr ['type'];
	taxonomy_vocabulary_save ( $oVocabulary );
	// Insert structural terms
	if (! empty ( $form_state ['values'] ['num_struc'] )) {
		if ($form_state ['values'] ['type_select'])
			$sText = '. Abschnitt';
		else
			$sText = '. Semester';
		for($i = 1; $i <= $form_state ['values'] ['num_struc']; $i ++) {
			$oTerm = new stdClass ();
			$oTerm->name = $i . $sText;
			$oTerm->vid = $oVocabulary->vid;
			taxonomy_term_save ( $oTerm );
		}
	}
	// Redirect user to taxonomy manager
	drupal_set_message ( 'Taxonomy "' . $form_state ['values'] ['name_input'] . '" successfully created. To publish set its weight to -10' );
	drupal_goto ( 'admin/structure/taxonomy_manager/double-tree/' . $oSourceCurr ['machine_name'] . '/' . $sMachineName );
}

/**
 * Implements hook_menu().
 * Registers all menu links with drupal. The following links are registered:
 * <ul>
 * <li>CEUS API Settings @ 'admin/stukowin/settings'</li>
 * <li>CEUS Data import @ 'admin/settings/stukowin/import'</li>
 * <li>PDF Generation @ 'admin/settings/stukowin/pdf'</li>
 * <li>ITSV/Specialisation Taxonomy Creation @ 'admin/settings/stukowin/taxonomy'</li>
 * <li>Curriculum JSON Service @ 'stukowin/crclm'</li>
 * <li>Curricula List JSON Service @ 'stukowin/crclmlst'</li>
 * <li>Course Detail JSON Service @ 'stukowin/lva'</li>
 * </ul>
 */
function stukowin_menu() {
	$items = array ();
	$items ['admin/settings/stukowin/pdf'] = array (
			'title' => 'Create PDF',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_pdf_menu' 
			),
			'access arguments' => array (
					'create PDF' 
			),
			'description' => t ( 'Create a PDF from current curricula' ),
			'type' => MENU_NORMAL_ITEM 
	);
	$items ['admin/settings/stukowin/taxonomy'] = array (
			'title' => 'New Curriculum Taxonomy',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_taxonomy_menu' 
			),
			'access arguments' => array (
					'create taxonomy' 
			),
			'description' => t ( 'Create a new ITSV or specialisation taxonomy' ),
			'type' => MENU_NORMAL_ITEM 
	);
	
	$items ['admin/settings/stukowin/import'] = array (
			'title' => 'CEUS Data Import',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_pre_retreive' 
			),
			'access arguments' => array (
					'start ceus import' 
			),
			'description' => t ( 'Import curricula data from CEUS' ),
			'type' => MENU_NORMAL_ITEM 
	);
	$items ['admin/stukowin/settings'] = array (
			'title' => 'Module Settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_admin' 
			),
			'access arguments' => array (
					'administer stukowin settings' 
			),
			'description' => t ( 'Set CEUS credentials' ),
			'type' => MENU_CALLBACK 
	);
	$items ['stukowin/crclm'] = array (
			'title' => 'Service',
			'page callback' => 'stukowin_get_crclm_taxonomy',
			'access callback' => 'user_access',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK 
	);
	$items ['stukowin/crclmlst'] = array (
			'title' => 'Service',
			'page callback' => 'stukowin_get_crclm_list',
			'access callback' => 'user_access',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK 
	);
	$items ['stukowin/lva'] = array (
			'title' => 'Service',
			'page callback' => 'stukowin_get_lva',
			'access callback' => 'user_access',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK 
	);
	return $items;
}

/**
 * Adds hook for the ckeditor plugin to insert a curriculum display
 */
function stukowin_ckeditor_plugin() {
	return array (
			'plugin_name' => array (
					// Plugin name.
					'name' => 'stukowin_curriculum',
					// Plugin description - it will be displayed in the plugins management section of the profile settings.
					'desc' => 'Plugin for inserting a curriculum taxonomy',
					// The full path to the CKEditor plugin directory, trailing slash included.
					'path' => drupal_get_path ( 'module', 'stukowin' ) . '/stukowin_curriculum/',
					// Plugin buttons definition (optional).
					'buttons' => array (
							'stukowin_curriculum' => array (
									'label' => 'Insert Taxonomy',
									'icon' => 'icons/stukowin_curriculum.png' 
							) 
					) 
			) 
	);
}

/**
 * Hook for telling the system to use our template on stukowin custom content type
 */
function stukowin_theme_registry_alter(&$theme_registry) {
	$theme_registry_copy = $theme_registry;
	_theme_process_registry ( $theme_registry_copy, 'phptemplate', 'theme_engine', 'my_custom_theme', drupal_get_path ( 'module', 'stukowin' ) );
	$theme_registry += array_diff_key ( $theme_registry_copy, $theme_registry );
	// A list of templates the module will provide templates for
	$hooks = array (
			'page' 
	);
	foreach ( $hooks as $h ) {
		// Add the key 'theme paths' if it doesn't exist in this theme's registry
		if (! isset ( $theme_registry [$h] ['theme paths'] ))
			$theme_registry [$h] ['theme paths'] = array ();
			// Shift this module's directory to the top of the theme path list
		if (is_array ( $theme_registry [$h] ['theme paths'] )) {
			$first_element = array_shift ( $theme_registry [$h] ['theme paths'] );
			if ($first_element) {
				array_unshift ( $theme_registry [$h] ['theme paths'], $first_element, drupal_get_path ( 'module', 'stukowin' ) );
			} else {
				array_unshift ( $theme_registry [$h] ['theme paths'], drupal_get_path ( 'module', 'stukowin' ) );
			}
		}
	}
}