<?php
/**
 * @defgroup Stukowin_Module Module Core
 * @brief Module that contains core functionality
 * 
 * This module contains all files, classes and methods that provide 
 * the core functionality of the Drupal module. The members of this group
 * ensure a working cooperation between all of the components and Drupal.
 * 
 * @authors Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Jakob Strasser - jakob.strasser@telenet.be
 * @authors Werner Breuer - bluescreenwerner@gmail.com
 * @authors Markus Gutmayer - m.gutmayer@gmail.com
 */

/**
 * @defgroup Drupal2ITSV Drupal2ITSV
 * @brief Module to create new Drupal ITSV/specialisation vocabularies
 * 
 * This module contains all files, classes and methods that provide 
 * the functionality for supporting the administrator when creating new Drupal vocabularies
 * that represent either an ITSV ("Idealtypischer Studienverlauf") or a specialisation (mainly for Master curricula).
 * 
 * ----------------------------------------------
 * 
 * As CEUS does not provide any information about fields of specialisation during the master studies and ideal courses of studies, henceforth called ITSV due to its German name,
 * it was a project requirement that new curricula can be created by the administrator for such purposes.
 * 
 * A freely available Drupal module called Taxonomy Manager (<https://www.drupal.org/project/taxonomy_manager>) gives the administrator the ability to copy vocabulary terms from one vocabulary to another, which is most of the work.
 * Unfortunately, this process cannot be simplified any further. Nevertheless, we tried to at least automate the task of creating a new vocabulary, copying all of the information over from the source curriculum
 * and creating top-level terms (such as "1. Semester" etc.), tasks which will be performed every time a new ITSV or specialisation has to be created.
 * 
 * This component handles exactly that. It inserts a new menu item (at admin/settings/stukowin/taxonomy) where the administrator can select a source curriculum to base the new one on, select whether to create an ITSV or specialisation vocabulary,
 * enter a name and choose how many top-level terms should be inserted. Once the administrator has filled out the form, the new vocabulary is automatically created and the browser is redirected to the Taxonomy Manager's "Dual View",
 * where the administrator can begin copying courses into the new vocabulary.
 * 
 * @remark This component does not have its own file as it does not contain a lot of code. All of its functionality is in the @ref stukowin.module file.
 * 
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @authors Werner Breuer - bluescreenwerner@gmail.com
 * @authors Markus Gutmayer - m.gutmayer@gmail.com
 */

/**
 * @file
 * @brief Main module file
 * 
 * This file is the central hook for the Drupal module. All functions accessible by Drupal are located in this file.
 * 
 * @authors Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Jakob Strasser - jakob.strasser@telenet.be
 * @authors Werner Breuer - bluescreenwerner@gmail.com
 * @authors Markus Gutmayer - m.gutmayer@gmail.com
 * @version 1.0.2 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 */
include_once dirname ( __FILE__ ) . '/ceus_importer.inc.php';
include_once dirname ( __FILE__ ) . '/content_manager.inc.php';
include_once dirname ( __FILE__ ) . '/pdf_creator.inc.php';

/**
 * @ingroup Stukwowin_Module
 * @brief Implements hook_help()
 * Displays help information about the module.
 * 
 * @param string $path Drupal Path for help link
 * @param string $arg Dddional call arguments
 * 
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @version 1.0.0 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28 
 */
function stukowin_help($path, $arg) {
	switch ($path) {
		// Main module help
		case 'admin/help#stukowin' :
			return '<p>' . t ( 'This module gets the complete JKU curriculum for Business Informatics from CEUS and displays it' ) . '</p>';
			break;
	}
}

/**
 * @ingroup Stukowin_Module
 * @brief Menu callback for module settings ("admin/stukowin/settings")
 * 
 * Form for administration of the module settings
 * This form has the following input fields:
 * * CEUS API Settings
 * 	+ URL to CEUS API
 * 	+ Username for CEUS API
 * 	+ Password for CEUS API
 * 	+ Last Update from CEUS API
 * * PDF Settings
 * 	+ PDF Path
 * 	+ PDF generic name
 * 
 * @return An array containing the form structure
 * 
 * @authors Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.1 2014-07-31
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28 
 */
function stukowin_admin() {
	$form = array ();
	// CEUS API Settings
	$form ['stukowin_ceus_api'] = array (
			'#type' => 'fieldset',
			'#title' => t ( 'CEUS API Settings' ),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE 
	);
	$form ['stukowin_ceus_api'] ['stukowin_ceus_api_url'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'URL' ),
			'#default_value' => variable_get ( 'stukowin_ceus_api_url' ),
			'#size' => 40,
			'#maxlength' => 255,
			'#description' => t ( "URL to CEUS API" ),
			'#required' => TRUE 
	);
	$form ['stukowin_ceus_api'] ['stukowin_ceus_api_username'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Username' ),
			'#default_value' => variable_get ( 'stukowin_ceus_api_username' ),
			'#size' => 20,
			'#maxlength' => 40,
			'#description' => t ( "Username for CEUS API" ),
			'#required' => FALSE 
	);
	$form ['stukowin_ceus_api'] ['stukowin_ceus_api_userpassword'] = array (
			'#type' => 'password',
			'#title' => t ( 'Password' ),
			'#default_value' => variable_get ( 'stukowin_ceus_api_userpassword' ),
			'#size' => 20,
			'#maxlength' => 40,
			'#description' => t ( "Password for CEUS API" ),
			'#required' => FALSE 
	);
	// PDF generation settings
	$form ['stukowin_pdf'] = array (
			'#type' => 'fieldset',
			'#title' => t ( 'PDF Settings' ),
			'#collapsible' => TRUE,
			'#collapsed' => FALSE 
	);
	$form ['stukowin_pdf'] ['stukowin_pdf_path'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Path' ),
			'#default_value' => variable_get ( 'stukowin_pdf_path', DRUPAL_ROOT . '/sites/default/files/pdf/archive' ),
			'#size' => 60,
			'#description' => t ( "The Path where the generated PDFs are saved" ),
			'#required' => TRUE 
	);
	$form ['stukowin_pdf'] ['stukowin_pdf_name'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Name' ),
			'#default_value' => variable_get ( 'stukowin_pdf_name', 'Uebersicht %currtype% %version%' ),
			'#size' => 40,
			'#description' => t ( 'The name template to use for new PDFs. Insert %version% where the curriculum version (e.g. "2013W") should be placed and %currtype% where the curriculum type (e.g "Bachelorstudium") should be placed' ),
			'#required' => TRUE 
	);
	return system_settings_form ( $form );
}

/**
 * @ingroup Drupal2PDF
 * @brief Menu callback for generating PDF documents ("admin/settings/stukowin/pdf")
 * 
 * The user can choose between all currently published curriculum taxonomies. If none are available, a warning message is displayed.
 * 
 * @param array $form Form structure as given by Drupal
 * @param array $form_state Form state as given by Drupal
 * @return The filled out form structure
 * 
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.0 2014-07-16
 * @since Commit e6573f8d945918d261f42b421be6e5de94881a0b on 2014-06-30
 * 
 * @see stukowin_pdf_menu_submit()
 */
function stukowin_pdf_menu($form, &$form_state) {
	// Load available curricula into array
	$aNames = array ();
	foreach ( (new content_manager ())->getCurricula ( '', array (
			'curriculum' 
	) ) as $oCurriculum ) {
		$aNames [$oCurriculum ['vid']] = t ( $oCurriculum ['name'] );
	}
	if (empty ( $aNames ))
		drupal_set_message ( 'There seems to be no curriculum currently available', 'warning' );
		// Build form
	$form = array ();
	$form ['curriculum_select'] = array (
			'#type' => 'select',
			'#title' => t ( 'Select Curriculum' ),
			'#description' => t ( "The taxonomy to create the PDF from" ),
			'#required' => TRUE,
			'#options' => $aNames 
	);
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Create PDF' ) 
	);
	return $form;
}

/**
 * @ingroup Drupal2PDF
 * @brief Submit handler for @ref stukowin_pdf_menu()
 * 
 * Creates an instance of @ref overviewPDF and starts the document generation. If successful, the full path of the generated document is displayed.
 * 
 * @param array $form Form structure as given by Drupal
 * @param array $form_state Form state as given by Drupal
 * 
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.0 2014-07-16
 * @since Commit e6573f8d945918d261f42b421be6e5de94881a0b on 2014-06-30
 * 
 * @see stukowin_pdf_menu()
 * @see overviewPDF::createPDF()
 */
function stukowin_pdf_menu_submit($form, &$form_state) {
	$oPdf = new overviewPDF ();
	drupal_set_message ( $oPdf->createPDF ( $form_state ['values'] ['curriculum_select'] ) );
}

/**
 * @ingroup CEUS2Drupal
 * @brief Menu callback for import ("admin/settings/stukowin/import")
 * 
 * Used as a warning before starting the import, as the process usually takes a long time to complete.
 * 
 * @remark There is nothing to do in this menu except click "Ok".
 *
 * @param array $form Form structure as given by Drupal
 * @param array $form_state Form state as given by Drupal
 * @return The filled out form structure
 * 
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.1.0 2014-07-31
 * @since Commit bcdb4bad5d0a81dbf12a98c54f8512035a8661d4 on 2014-06-30
 * 
 * @see stukowin_re_retrieve_submit()
 */
function stukowin_pre_retreive($form, &$form_state) {
	$form = array ();
	if (variable_get ( 'stukowin_ceus_api_url' ) === null) {
		drupal_set_message ( "Cannot start import: The CEUS API URL is not set", "error" );
		$form ['error_text'] = array (
				'#markup' => t ( '<p><strong>Please configure the Stukowin CEUS module first. </strong><a href="' . base_path() . 'admin/stukowin/settings">Link to configuration</a></p>' )
		);
		return $form;
	}
	$warning = '';
	$warning = variable_get ( 'stukowin_ceus_api_username' ) == null ? '<li>username</li>' : '';
	$warning .= variable_get ( 'stukowin_ceus_api_userpassword' ) == null ? '<li>password</li>' : '';
	if (!empty($warning)) {
		drupal_set_message ( "The following CEUS API parameters are not set, which may lead to an unsuccessful import:<ul>" . $warning . '</ul>You can configure the module <a href="' . base_path() . 'admin/stukowin/settings">here</a>.', "warning" );
	}
	$form ['warning_text'] = array (
			'#markup' => t ( '<p><strong>Are you sure you want to start the import? (this might take a while)</strong></p>' )
	);
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Start import' ) 
	);
	return $form;
}

/**
 * @ingroup CEUS2Drupal
 * @brief Submit handler for @ref stukowin_pre_retreive()
 * 
 * Starts the import process and displays the outcome to the user.
 * 
 * @param array $form Form structure as given by Drupal
 * @param array $form_state Form state as given by Drupal
 *  
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.0 2014-07-16
 * @since Commit bcdb4bad5d0a81dbf12a98c54f8512035a8661d4 on 2014-06-30 
 * 
 * @see stukowin_pre_retreive()
 */
function stukowin_pre_retreive_submit($form, &$form_state) {
	include_once dirname ( __FILE__ ) . '/stukowin.install';
	$oCeusImporter = new ceus_importer ();
	if ($oCeusImporter->connect ()) {
		drupal_set_message ( $oCeusImporter->get_curricula () );
	} else
		drupal_set_message ( $oCeusImporter->get_error (), 'error' );
}

/**
 * @ingroup Drupal2AGG
 * @brief JSON service for the nested array of courses details for one curriculum
 *
 * @param integer $iVID
 *        	The Drupal vocabulary id of the curriculum to get
 * 
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @version 1.0.0 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28 
 * 
 * @see content_manager::json_service_curriculum()
 */
function stukowin_get_crclm_taxonomy($iVID) {
	$oContentManager = new content_manager ();
	return $oContentManager->json_service_curriculum ( $iVID );
}

/**
 * @ingroup Drupal2AGG
 * @brief JSON service for a list of all currently published curricula
 * 
 * The type of curriculum (e.g. "Bachelorstudium", "Masterstudium"),
 * types of taxonomies (e.g. "curriculum", "itsv" or "specialisation")
 * and the language (e.g. "de") can be given as HTTP GET parameters through the respective parameter names @c "currtype", @c taxtypes and @c lang.
 * 
 * @authors Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.0 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28 
 * 
 * @see content_manager::getCurricula()
 */
function stukowin_get_crclm_list() {
	$oContentManager = new content_manager ();
	// Set default values
	$sCurrType = '';
	$aTaxonomyTypes = array (
			'curriculum',
			'itsv',
			'specialisation' 
	);
	$sLang = 'de';
	// Get values from request (if given)
	if (isset ( $_GET ['currtype'] ))
		$sCurrType = $_GET ['currtype'];
	if (isset ( $_GET ['taxtypes'] ))
		$aTaxonomyTypes = $_GET ['taxtypes'];
	if (isset ( $_GET ['lang'] ))
		$sLang = $_GET ['lang'];
	drupal_json_output ( $oContentManager->getCurricula ( $sCurrType, $aTaxonomyTypes, $sLang ) );
	die (); // Necessary because drupal would send additional data otherwise
}

/**
 * @ingroup Drupal2AGG
 * @brief JSON service for the details of a single course
 *
 * @param integer $iNodeID
 *        	The Drupal content node id of the course to get
 * 
 * @author Konstantinos Dafalias - kdafalias@gmail.com
 * @version 1.0.0 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28 
 * 
 * @see content_manager::json_service_lva()
 */
function stukowin_get_lva($iNodeID) {
	$oContentManager = new content_manager ();
	return $oContentManager->json_service_lva ( $iNodeID );
}

/**
 * @ingroup Drupal2ITSV
 * @brief Menu callback for creating a new ITSV or specialisation vocabulary
 * 
 * Allows the user to
 * + Select a source vocabulary
 * + Choose which type of vocabulary to create (ITSV or specialisation)
 * + Set a name for the new vocabulary
 * + Choose how many structural terms (e.g. "1. Semester", "2. Semester") to automatically insert
 * 
 * @param array $form Form structure as given by Drupal
 * @param array $form_state Form state as given by Drupal
 * @return The filled out form structure
 * 
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.0 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 * 
 * @see stukowin_taxonomy_menu_submit()
 */
function stukowin_taxonomy_menu($form, &$form_state) {
	// Load available curricula into array
	$aNames = array ();
	foreach ( (new content_manager ())->getCurricula ( '', array (
			'curriculum' 
	) ) as $oCurriculum ) {
		$aNames [$oCurriculum ['vid']] = t ( $oCurriculum ['name'] );
	}
	if (empty ( $aNames ))
		drupal_set_message ( 'There seems to be no curriculum currently available', 'warning' );
		// Build form
	$form = array ();
	$form ['curriculum_select'] = array (
			'#type' => 'select',
			'#title' => t ( 'Select Curriculum' ),
			'#description' => t ( "The core curriculum to base the new taxonomy on" ),
			'#required' => TRUE,
			'#options' => $aNames 
	);
	$form ['type_select'] = array (
			'#type' => 'select',
			'#title' => t ( 'Select Type' ),
			'#description' => t ( "The type of taxonomy to create" ),
			'#required' => TRUE,
			'#options' => array (
					'ITSV',
					'Specialisation' 
			) 
	);
	$form ['name_input'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Name' ),
			'#description' => t ( 'The name of the new taxonomy (a distinct name such as "ITSV Bachelorstudium 2013W Beginn WS" is recommended)' ),
			'#required' => TRUE 
	);
	$form ['num_struc'] = array (
			'#type' => 'textfield',
			'#title' => t ( 'Number of root elements' ),
			'#description' => t ( 'Number of root elemets (such as "1. Semester, 2. Semester etc." for ITSV) to add automatically' ),
			'#required' => FALSE,
			'#element_validate' => array (
					'element_validate_integer_positive' 
			),
			'#default_value' => '4' 
	);
	$form ['submit'] = array (
			'#type' => 'submit',
			'#value' => t ( 'Create Taxonomy' ) 
	);
	return $form;
}

/**
 * @ingroup Drupal2ITSV
 * @brief Submit handler for @ref stukowin_taxonomy_menu()
 * 
 * Creates a new ITSV or specialisation vocabulary and redirects the user to the taxonomy manager's dual view.
 * 
 * @param array $form Form structure as given by Drupal
 * @param array $form_state Form state as given by Drupal
 * 
 * @author Jakob Strasser - jakob.strasser@telenet.be
 * @version 1.0.0 2014-07-16
 * @since Commit 190577568295b7682dc74a79c4fd478e9e33c639 on 2014-07-02
 * 
 * @see stukowin_taxonomy_menu()
 */
function stukowin_taxonomy_menu_submit($form, &$form_state) {
	$sTaxonomyType = $form_state ['values'] ['type_select'] ? 'specialisation' : 'itsv';
	$oContentManager = new content_manager ();
	$oSourceCurr = $oContentManager->getCurriculum ( $form_state ['values'] ['curriculum_select'] );
	$sMachineName = $oContentManager->getUniqueMachineName ( ($sTaxonomyType . '_') );
	// Create new vocabulary
	$aEdit = array (
			'name' => $form_state ['values'] ['name_input'],
			'machine_name' => $sMachineName,
			'description' => $form_state ['values'] ['name_input'],
			'hierarchy' => 1,
			'module' => 'ceus_importer',
			'weight' => 10 
	);
	$oVocabulary = ( object ) $aEdit;
	$oVocabulary->{'faculty'} ['und'] [0] ['value'] = $oSourceCurr ['faculty'];
	$oVocabulary->{'version'} ['und'] [0] ['value'] = $oSourceCurr ['version'];
	$oVocabulary->{'currtype'} ['und'] [0] ['value'] = $oSourceCurr ['type'];
	taxonomy_vocabulary_save ( $oVocabulary );
	// Insert structural terms
	if (! empty ( $form_state ['values'] ['num_struc'] )) {
		if ($form_state ['values'] ['type_select'])
			$sText = '. Abschnitt';
		else
			$sText = '. Semester';
		for($i = 1; $i <= $form_state ['values'] ['num_struc']; $i ++) {
			$oTerm = new stdClass ();
			$oTerm->name = $i . $sText;
			$oTerm->vid = $oVocabulary->vid;
			taxonomy_term_save ( $oTerm );
		}
	}
	// Redirect user to taxonomy manager
	drupal_set_message ( 'Taxonomy "' . $form_state ['values'] ['name_input'] . '" successfully created. To publish set its weight to -10' );
	drupal_goto ( 'admin/structure/taxonomy_manager/double-tree/' . $oSourceCurr ['machine_name'] . '/' . $sMachineName );
}

/**
 * @ingroup Stukowin_Module
 * @brief Implements hook_menu().
 * 
 * Registers all menu links with Drupal. The following links are registered:
 * + CEUS API Settings @ 'admin/stukowin/settings'
 * + CEUS Data import @ 'admin/settings/stukowin/import'
 * + PDF Generation @ 'admin/settings/stukowin/pdf'
 * + ITSV/Specialisation Taxonomy Creation @ 'admin/settings/stukowin/taxonomy'
 * + Curriculum JSON Service @ 'stukowin/crclm'
 * + Curricula List JSON Service @ 'stukowin/crclmlst'
 * + Course Detail JSON Service @ 'stukowin/lva'
 * 
 * @authors Konstantinos Dafalias - kdafalias@gmail.com
 * @authors Jakob Strasser - jakob.strasser@telenet.be
 * @authors Werner Breuer - bluescreenwerner@gmail.com
 * @version 1.0.0 2014-07-16
 * @since Commit d179abcc5e05743086cd67cf1ce30b08923a7183 on 2014-06-28
 * 
 * @see stukowin_pdf_menu()
 * @see stukowin_taxonomy_menu()
 * @see stukowin_pre_retreive()
 * @see stukowin_admin()
 * @see stukowin_get_lva()
 * @see stukowin_get_crclm_taxonomy()
 * @see stukowin_get_crclm_list()
 */
function stukowin_menu() {
	$items = array ();
	$items ['admin/settings/stukowin/pdf'] = array (
			'title' => 'Create PDF',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_pdf_menu' 
			),
			'access arguments' => array (
					'create PDF' 
			),
			'description' => t ( 'Create a PDF from current curricula' ),
			'type' => MENU_NORMAL_ITEM 
	);
	$items ['admin/settings/stukowin/taxonomy'] = array (
			'title' => 'New Curriculum Taxonomy',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_taxonomy_menu' 
			),
			'access arguments' => array (
					'create taxonomy' 
			),
			'description' => t ( 'Create a new ITSV or specialisation taxonomy' ),
			'type' => MENU_NORMAL_ITEM 
	);
	
	$items ['admin/settings/stukowin/import'] = array (
			'title' => 'CEUS Data Import',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_pre_retreive' 
			),
			'access arguments' => array (
					'start ceus import' 
			),
			'description' => t ( 'Import curricula data from CEUS' ),
			'type' => MENU_NORMAL_ITEM 
	);
	$items ['admin/stukowin/settings'] = array (
			'title' => 'Module Settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array (
					'stukowin_admin' 
			),
			'access arguments' => array (
					'administer stukowin settings' 
			),
			'description' => t ( 'Set CEUS credentials' ),
			'type' => MENU_CALLBACK 
	);
	$items ['stukowin/crclm'] = array (
			'title' => 'Service',
			'page callback' => 'stukowin_get_crclm_taxonomy',
			'access callback' => 'user_access',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK 
	);
	$items ['stukowin/crclmlst'] = array (
			'title' => 'Service',
			'page callback' => 'stukowin_get_crclm_list',
			'access callback' => 'user_access',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK 
	);
	$items ['stukowin/lva'] = array (
			'title' => 'Service',
			'page callback' => 'stukowin_get_lva',
			'access callback' => 'user_access',
			'access arguments' => array (
					'access content' 
			),
			'type' => MENU_CALLBACK 
	);
	return $items;
}

/**
 * @ingroup Drupal2AGG
 * @brief Implements hook_ckeditor_plugin
 * 
 * Adds the hook for the @ref stukowin_curriculum.js "ckeditor plugin" to insert a curriculum display.
 * 
 * @authors Werner Breuer - bluescreenwerner@gmail.com
 * @authors Markus Gutmayer - m.gutmayer@gmail.com
 * @version 1.0.0 2014-07-16
 * @since Commit b63de89ea0d0b45b428d333a4ba5c8d859047ba2 on 2014-07-01 
 */
function stukowin_ckeditor_plugin() {
	return array (
			'plugin_name' => array (
					// Plugin name.
					'name' => 'stukowin_curriculum',
					// Plugin description - it will be displayed in the plugins management section of the profile settings.
					'desc' => 'Plugin for inserting a curriculum taxonomy',
					// The full path to the CKEditor plugin directory, trailing slash included.
					'path' => drupal_get_path ( 'module', 'stukowin' ) . '/stukowin_curriculum/',
					// Plugin buttons definition (optional).
					'buttons' => array (
							'stukowin_curriculum' => array (
									'label' => 'Insert Taxonomy',
									'icon' => 'icons/stukowin_curriculum.png' 
							) 
					) 
			) 
	);
}

/**
 * @ingroup Drupal2AGG
 * @brief Implements hook_theme_registry_alter
 * 
 * Hook for telling the system to use our template on the stukowin custom content type.
 * 
 * @param object $theme_registry The entire cache of theme registry information, post-processing
 * 
 * @authors Werner Breuer - bluescreenwerner@gmail.com
 * @authors Markus Gutmayer - m.gutmayer@gmail.com
 * @version 1.0.0 2014-07-16
 * @since Commit 9f1f3db3b94f0c44518af0f58401bac46f41d7cb on 2014-07-05 
 */
function stukowin_theme_registry_alter(&$theme_registry) {
	$theme_registry_copy = $theme_registry;
	_theme_process_registry ( $theme_registry_copy, 'phptemplate', 'theme_engine', 'my_custom_theme', drupal_get_path ( 'module', 'stukowin' ) );
	$theme_registry += array_diff_key ( $theme_registry_copy, $theme_registry );
	// A list of templates the module will provide templates for
	$hooks = array (
			'page' 
	);
	foreach ( $hooks as $h ) {
		// Add the key 'theme paths' if it doesn't exist in this theme's registry
		if (! isset ( $theme_registry [$h] ['theme paths'] ))
			$theme_registry [$h] ['theme paths'] = array ();
			// Shift this module's directory to the top of the theme path list
		if (is_array ( $theme_registry [$h] ['theme paths'] )) {
			$first_element = array_shift ( $theme_registry [$h] ['theme paths'] );
			if ($first_element) {
				array_unshift ( $theme_registry [$h] ['theme paths'], $first_element, drupal_get_path ( 'module', 'stukowin' ) );
			} else {
				array_unshift ( $theme_registry [$h] ['theme paths'], drupal_get_path ( 'module', 'stukowin' ) );
			}
		}
	}
}
